//: In order to use this AWS Marketplace product you need to accept terms and subscribe. 
//To do so please visit https://aws.amazon.com/marketplace/pp?sku=1wdhns2dufgz1kkmx3789xdpd

  //  ami = default = "ami-0a3a278d025067ab7"    values = 1076-a-2014d892-e9dc-46fb-b054-20a01660bca1-22062-2014d892-e9dc-46fb-b054-20a01660bca1
# data block for fetching the latest ami 
data "aws_ami" "CentOS" {
  most_recent = true
  owners = ["aws-marketplace"]
  

  filter {
    name = "name"
   // values = ["CentOS Linux 7*"]
    values = ["1076-a-2014d892-e9dc-46fb-b054-20a01660bca1-22062-2014d892-e9dc-46fb-b054-20a01660bca1"]
  }

  filter {
    name = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name = "virtualization-type"
    values = ["hvm"]
  }
}
 
 // to output the ami id
output ami_id {
   value = data.aws_ami.CentOS.id

}

resource "aws_instance" "demo" { //resource <resource type> <resource local name>  = MAIN
 ami = data.aws_ami.CentOS.id
 instance_type = var.instance_type
 availability_zone = "us-east-1a"
 security_groups = [aws_security_group.TF_Sec_Grp.name]
 # key_name = "demo_ec2"  //created using the console.. CAN BE DONE USING TF AS WELL

 tags = {
   "Name" = "my EC2"
 }
}
resource "aws_ebs_volume" "ebsvolume" {    // = for storage  
  availability_zone = "us-east-1a"
  size = 20
  #encrypted = false
  tags = {
    name = "prachiVol"
  }
}
resource "aws_volume_attachment" "ebs_att" {
  device_name = "/dev/sdh"
  volume_id   = aws_ebs_volume.ebsvolume.id
  instance_id = aws_instance.demo.id
}


#securitygroup using Terraform

 resource "aws_security_group" "TF_Sec_Grp" {
  name        = "security group using Terraform"
  description = "security group using Terraform"
  vpc_id      = "vpc-09e26a16cbd13b4cb" //SGs are vpc bounded

  ingress {
    description      = "SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "TF_Sec_Grp"
  }
 }

# key pair 
 resource "aws_key_pair" "TF_key" {
  key_name   = "TF_key"
  public_key = tls_private_key.rsa.public_key_openssh
}
#--> private key to be stored locally, to ssh on local machine
resource "tls_private_key" "rsa" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

resource "local_file" "TF-key" {
    content  = tls_private_key.rsa.private_key_pem
    filename = "tfkey"
}